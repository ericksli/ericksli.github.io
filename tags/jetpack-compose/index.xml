<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jetpack Compose on EricLog</title><link>https://eric.swiftzer.net/tags/jetpack-compose/</link><description>Recent content in Jetpack Compose on EricLog</description><generator>Hugo -- 0.139.2</generator><language>zh-tw</language><lastBuildDate>Sun, 24 Nov 2024 15:20:00 +0800</lastBuildDate><atom:link href="https://eric.swiftzer.net/tags/jetpack-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>Missing parts when designing and implementing Android UI</title><link>https://eric.swiftzer.net/2024/11/missing-parts-when-designing-and-implementing-android-ui/</link><pubDate>Sun, 24 Nov 2024 15:20:00 +0800</pubDate><guid>https://eric.swiftzer.net/2024/11/missing-parts-when-designing-and-implementing-android-ui/</guid><description>&lt;p>昨天出席了 &lt;a href="https://gdg.community.dev/gdg-hong-kong/">GDG Hong Kong&lt;/a> 舉辦的 &lt;a href="https://gdg.community.dev/events/details/google-gdg-hong-kong-presents-devfest-2024-hong-kong/">DevFest 2024 Hong Kong&lt;/a> 並分享了「Missing parts when designing and implementing Android UI」。&lt;/p>
&lt;p>這個題目大致分為三個部分：&lt;/p>
&lt;ol>
&lt;li>一般在準備 Figma mockup 及由 mockup 實作成 Android app UI 時的常見問題，並以一 &lt;a href="https://www.figma.com/community/file/1116708627748807811/coffee-shop-mobile-app-design">Figma Community 免費範本&lt;/a>作例子&lt;/li>
&lt;li>Jetpack Compose accessibility&lt;/li>
&lt;li>Jetpack Compose UI testing，示範 Compose testing 搭配 Robolectric 及支援 Appium 的貼士&lt;/li>
&lt;/ol></description></item><item><title>AndroidX Navigation component for Jetpack Compose type safety</title><link>https://eric.swiftzer.net/2024/08/androidx-navigation-compose-type-safety/</link><pubDate>Sun, 18 Aug 2024 22:00:00 +0800</pubDate><guid>https://eric.swiftzer.net/2024/08/androidx-navigation-compose-type-safety/</guid><description>&lt;p>AndroidX Navigation component 是 Google 推出的 &lt;a href="https://www.youtube.com/watch?v=2k8x8V77CrU">single &lt;code>Activity&lt;/code> app&lt;/a> navigation library。本身是用 &lt;code>Fragment&lt;/code> 來做每一頁的內容，然後再用新的 Android resource type——navigation 來定義 navigation graph（即是聲明一個 navigation graph 內有什麼 &lt;code>Fragment&lt;/code>、打開 &lt;code>Fragment&lt;/code> 時要什麼參數和各 &lt;code>Fragment&lt;/code> 之間如何導覽的 XML 檔案）。如果加上 &lt;a href="https://developer.android.com/guide/navigation/use-graph/safe-args">Safe Args&lt;/a> Gradle plugin 的話就會按 navigation graph XML 檔案生成那些 Java code 去讓你在 &lt;code>Fragment&lt;/code> 內轉頁時調用，那就不會怕轉頁時漏了幾個參數沒有傳到，因為漏了的話就不能成功 compile。&lt;/p></description></item><item><title>Jetpack Compose Navigation component sub-graph</title><link>https://eric.swiftzer.net/2022/07/jetpack-compose-navigation-component-sub-graph/</link><pubDate>Wed, 27 Jul 2022 21:30:00 +0800</pubDate><guid>https://eric.swiftzer.net/2022/07/jetpack-compose-navigation-component-sub-graph/</guid><description>&lt;p>這次&lt;a href="https://eric.swiftzer.net/2022/07/jetpack-compose-migration-1/">遷移到 Compose&lt;/a> 時特別花了時間試用 Compose 的 Navigation component，終於弄清 nested graph 的意義。其實 Compose 的 Navigation component 底層都是跟 XML 版的 Navigation component 一樣，只是底層多了以 route 形式的處理。以往的說明文件在介紹 &lt;a href="https://developer.android.com/guide/navigation/navigation-nested-graphs">nested navigation graph&lt;/a> 時沒有太具體說明 nested graph 背後的意義，看完之後可能覺得只是用來避免單一 XML 檔過長而拆成不同 sub-graph。但其實在 deep link 時是有特別意義。&lt;/p></description></item><item><title>Jetpack Compose 遷移 (2)</title><link>https://eric.swiftzer.net/2022/07/jetpack-compose-migration-2/</link><pubDate>Tue, 26 Jul 2022 14:00:00 +0800</pubDate><guid>https://eric.swiftzer.net/2022/07/jetpack-compose-migration-2/</guid><description>&lt;p>&lt;a href="https://eric.swiftzer.net/2022/07/jetpack-compose-migration-1/">上一篇&lt;/a>提過如何將 &lt;a href="https://play.google.com/store/apps/details?id=net.swiftzer.metroride">MetroRide&lt;/a> 由傳統 view system 遷移到 Jetpack Compose。但一篇又太長，所以分拆成兩篇。&lt;/p>
&lt;h2 id="dependency-injection">Dependency injection&lt;/h2>
&lt;p>按照官方的建議，composable function 要用到的 dependency 應該由 caller 經參數提供。然後就是由外層一直傳進去。至於那個外層最遠可以去到 &lt;code>Activity&lt;/code> 或者 &lt;code>Fragment&lt;/code>。由於 composable function 就是 top-level function，沒有 class 包住，所以平常用開的 Dagger 或者 Koin 之類的 DI library 都無辦法輕易地在 composable function 經 DI 拿到 dependency。如果以 Dagger Hilt 來計，目前是有這幾種方式：&lt;/p></description></item><item><title>Jetpack Compose 遷移 (1)</title><link>https://eric.swiftzer.net/2022/07/jetpack-compose-migration-1/</link><pubDate>Sun, 24 Jul 2022 14:06:00 +0800</pubDate><guid>https://eric.swiftzer.net/2022/07/jetpack-compose-migration-1/</guid><description>&lt;p>近幾個月斷斷續續替 &lt;a href="https://play.google.com/store/apps/details?id=net.swiftzer.metroride">MetroRide&lt;/a> 的界面由傳統 view system（即是 layout XML）轉為 &lt;a href="https://developer.android.com/jetpack/compose">Jetpack Compose&lt;/a>，順帶補上去年參加 &lt;a href="https://eric.swiftzer.net/2021-ithome-ironman/">iThome 鐵人賽&lt;/a>時用來做示範的重鐵抵站時間功能。昨天新版 app 上架了就來分享一下遷移過程。其實這個 app 在之前的版本有把其中一頁靜態的頁面（延誤定義）改用 Compose，那時是在 &lt;code>Fragment&lt;/code> 內的 &lt;code>onCreateView&lt;/code> 加入 &lt;code>setContent&lt;/code> 顯示 Compose 內容。由於那時只是做排版，沒有遇到大問題。之後開始慢慢轉用 Compose 才遇到問題。&lt;/p></description></item></channel></rss>